using Game.AutoGenerated;
using Gameplay;
using Gameplay.ECS;
using Gameplay.ECS.Healthcare;
using Gameplay.ECS.UnityLayer;
using Infrastructure.Pool;
using Infrastructure.Repos;
using Scellecs.Morpeh;
using Scellecs.Morpeh.Providers;
using UnityEngine;
using VContainer;
using VContainer.Unity;

namespace Infrastructure
{
    public interface IGameFactory
    {
        GameObject CreatePrefabInjected(GameObject prefab, Vector3 position, Quaternion rotation);
        GameObject CreateAvatar(Vector3 position, Quaternion rotation);

        void CreateProjectile(GameObject prefab, Vector3 position, Quaternion rotation,
            ProjectileWeaponComponent projectileWeapon);

        T CreatePrefabInjected<T>(T prefab, Transform parent = null) where T : Component;
        T CreatePrefabInjected<T>(T prefab, Vector3 position, Quaternion rotation) where T : Component;
        GameObject CreateParticle(GameObject prefab, Transform parent);
        GameObject CreateEnemy(EnemyTypeId typeId, Vector3 position, Quaternion rotation);
        GameObject CreatePrefabInjected(GameObject prefab, Transform parent = null);
        GameObject CreatePooled(GameObject prefab, Vector3 position, Quaternion rotation);
        GameObject CreatePortal(GameObject prefab, Vector3 position, Quaternion rotation);
    }

    public class GameFactory : IGameFactory
    {
        private readonly IObjectResolver _objectResolver;
        private readonly IDataProvider _dataProvider;
        private readonly EnemyRepository _enemyRepository;
        private readonly PrefabPoolService _prefabPoolService;

        public GameFactory(IObjectResolver objectResolver, IDataProvider dataProvider, EnemyRepository enemyRepository,
            PrefabPoolService prefabPoolService)
        {
            _prefabPoolService = prefabPoolService;
            _enemyRepository = enemyRepository;
            _dataProvider = dataProvider;
            _objectResolver = objectResolver;
        }

        public GameObject CreatePrefabInjected(GameObject prefab, Vector3 position, Quaternion rotation)
        {
            GameObject injected = _objectResolver.Instantiate(prefab, position, rotation);
            ConfigureEntity(injected);
            return injected;
        }

        public GameObject CreatePrefabInjected(GameObject prefab, Transform parent = null)
        {
            GameObject injected = _objectResolver.Instantiate(prefab, parent);
            ConfigureEntity(injected);
            return injected;
        }

        public T CreatePrefabInjected<T>(T prefab, Vector3 position, Quaternion rotation) where T : Component
        {
            T injected = _objectResolver.Instantiate(prefab, position, rotation);
            ConfigureEntity(injected.gameObject);
            return injected;
        }

        public T CreatePrefabInjected<T>(T prefab, Transform parent = null) where T : Component
        {
            T injected = _objectResolver.Instantiate(prefab, parent);
            ConfigureEntity(injected.gameObject);
            return injected;
        }

        private void ConfigureEntity(GameObject instance)
        {
            if (W.TryGetEntity(instance, out Entity entity))
            {
                entity
                    .SetIfNone(new TransformComponent
                    {
                        Value = instance.transform
                    })
                    .SetIfNone(new GameObjectComponent
                    {
                        Value = instance
                    })
                    ;
            }
        }

        public GameObject CreateParticle(GameObject prefab, Transform parent)
        {
            GameObject particle = GetOrCreatePooled(prefab, parent);

            W.TryGetEntity(particle, out Entity entity);
            entity
                .SetIfNone(new ParticleComponent
                {
                    ParticleSystem = particle.GetComponent<ParticleSystem>()
                });
            
            return particle;
        }

        public GameObject CreateEnemy(EnemyTypeId typeId, Vector3 position, Quaternion rotation)
        {
            EnemyDefinition enemyDefinition = _enemyRepository.GetById(typeId);
            GameObject enemy = CreatePooled(enemyDefinition.Prefab, position, rotation);
            return enemy;
        }

        private GameObject GetOrCreatePooled(GameObject prefab, Transform parent = null)
        {
            GameObject instance;
            if (!_prefabPoolService.Has(prefab))
            {
                instance = CreatePrefabInjected(prefab, parent);
                _prefabPoolService.Register(prefab, instance);
            }
            else
            {
                instance = _prefabPoolService.Spawn(prefab);
                ConfigureEntity(instance);
            }
            
            return instance;
        }

        public GameObject CreatePooled(GameObject prefab, Vector3 position, Quaternion rotation)
        {
            GameObject instance = GetOrCreatePooled(prefab);
            instance.transform.SetPositionAndRotation(position, rotation);
            return instance;
        }

        public GameObject CreatePortal(GameObject prefab, Vector3 position, Quaternion rotation)
        {
            GameObject portal = CreatePooled(prefab, position, rotation);
            W.TryGetEntity(portal, out Entity entity);
            entity.SetIfNone(new InitCollisionsRequest());
            portal.layer = LayerMask.NameToLayer(Layers.CollidePlayer);
            return portal;
        }

        public void CreateProjectile(GameObject prefab, Vector3 position, Quaternion rotation,
            ProjectileWeaponComponent projectileWeapon)
        {
            GameObject projectile = CreatePooled(prefab, position, rotation);
            
            W.TryGetEntity(projectile, out Entity entity);

            entity.SetComponent(new MovableComponent
            {
                MoveDirection = projectile.transform.forward,
                Speed = projectileWeapon.ShotSpeed,
            });

            entity.AddComponent<InitCollisionsRequest>();
        }

        public GameObject CreateAvatar(Vector3 position, Quaternion rotation)
        {
            GameObject avatar = CreatePrefabInjected(_dataProvider.PlayerConfig.Prefab, position, rotation);
            W.TryGetEntity(avatar, out Entity entity);
            entity.SetIfNone(new InitCollisionsRequest());
            return avatar;
        }
    }
}